    /**
    * @param {number} n
    * @return {number}
    */
    var countVowelStrings = function(n) {    
    /*
        n = 1 : 1 , 1 , 1 , 1 , 1
        n = 2 : 5 , 4 , 3 , 2 , 1
        n = 3 : 15, 10, 6 , 3 , 1 
        n = 4 : 35, 20, 10, 4 , 1 => addition of 1 + 3 (next top) = 4 (next to the 1), and so forth : 1+3+6 = 10, etc. 
    
        This is a pattern recognition process, not mere iteration of all possible combinations
    */
      
    const constU = 1 // u is always = 1
    // build all bases
    var allBases = []
    for(let i = 0; i < 55; i++)
        {
        if(i == 0)
            {
                allBases.push([1, 1, 1, 1, constU])
            }
        else
            {
                let a = i-1
                let currBase = [...allBases[a]]
                // console.log("allBases["+a+"]:"+allBases[a])                    
                // console.log("currBase: "+JSON.stringify(currBase))
                let index0 = currBase[4]+currBase[3]+currBase[2]+currBase[1]+currBase[0] 
                let index1 = currBase[4]+currBase[3]+currBase[2]+currBase[1]
                let index2 = currBase[4]+currBase[3]+currBase[2]
                let index3 = currBase[3]+currBase[4]
                allBases.push([index0, index1, index2, index3, constU])
            }
        }        
        //console.log(JSON.stringify(allBases))  
        return allBases[n][0]               
    };